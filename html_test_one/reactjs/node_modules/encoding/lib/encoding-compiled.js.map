{"version":3,"sources":["encoding.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,YAAY,QAAQ,YAAR,CAAhB;AACA;AACA;AACA,IAAI,QAAQ,QAAQ,gBAAR,CAAZ;;AAEA;AACA,OAAO,OAAP,CAAe,OAAf,GAAyB,OAAzB;;AAEA;;;;;;;;;AASA,SAAS,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,EAA0B,IAA1B,EAAgC,OAAhC,EAAyC;AACrC,WAAO,cAAc,QAAQ,OAAtB,CAAP;AACA,SAAK,cAAc,MAAM,OAApB,CAAL;AACA,UAAM,OAAO,EAAb;;AAEA,QAAI,MAAJ;;AAEA,QAAI,SAAS,OAAT,IAAoB,OAAO,GAAP,KAAe,QAAvC,EAAiD;AAC7C,cAAM,IAAI,MAAJ,CAAW,GAAX,EAAgB,QAAhB,CAAN;AACH;;AAED,QAAI,SAAS,EAAb,EAAiB;AACb,YAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AACzB,qBAAS,IAAI,MAAJ,CAAW,GAAX,CAAT;AACH,SAFD,MAEO;AACH,qBAAS,GAAT;AACH;AACJ,KAND,MAMO,IAAI,SAAS,CAAC,OAAd,EAAuB;AAC1B,YAAI;AACA,qBAAS,aAAa,GAAb,EAAkB,EAAlB,EAAsB,IAAtB,CAAT;AACH,SAFD,CAEE,OAAO,CAAP,EAAU;AACR,oBAAQ,KAAR,CAAc,CAAd;AACA,gBAAI;AACA,yBAAS,iBAAiB,GAAjB,EAAsB,EAAtB,EAA0B,IAA1B,CAAT;AACH,aAFD,CAEE,OAAO,CAAP,EAAU;AACR,wBAAQ,KAAR,CAAc,CAAd;AACA,yBAAS,GAAT;AACH;AACJ;AACJ,KAZM,MAYA;AACH,YAAI;AACA,qBAAS,iBAAiB,GAAjB,EAAsB,EAAtB,EAA0B,IAA1B,CAAT;AACH,SAFD,CAEE,OAAO,CAAP,EAAU;AACR,oBAAQ,KAAR,CAAc,CAAd;AACA,qBAAS,GAAT;AACH;AACJ;;AAGD,QAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,iBAAS,IAAI,MAAJ,CAAW,MAAX,EAAmB,OAAnB,CAAT;AACH;;AAED,WAAO,MAAP;AACH;;AAED;;;;;;;;AAQA,SAAS,YAAT,CAAsB,GAAtB,EAA2B,EAA3B,EAA+B,IAA/B,EAAqC;AACjC,QAAI,QAAJ,EAAc,KAAd;AACA,YAAQ,IAAI,KAAJ,CAAU,IAAV,EAAgB,KAAK,oBAArB,CAAR;AACA,eAAW,MAAM,OAAN,CAAc,GAAd,CAAX;AACA,WAAO,SAAS,KAAT,CAAe,CAAf,EAAkB,SAAS,MAA3B,CAAP;AACH;;AAED;;;;;;;;AAQA,SAAS,gBAAT,CAA0B,GAA1B,EAA+B,EAA/B,EAAmC,IAAnC,EAAyC;AACrC,QAAI,OAAO,OAAX,EAAoB;AAChB,eAAO,UAAU,MAAV,CAAiB,GAAjB,EAAsB,IAAtB,CAAP;AACH,KAFD,MAEO,IAAI,SAAS,OAAb,EAAsB;AACzB,eAAO,UAAU,MAAV,CAAiB,GAAjB,EAAsB,EAAtB,CAAP;AACH,KAFM,MAEA;AACH,eAAO,UAAU,MAAV,CAAiB,UAAU,MAAV,CAAiB,GAAjB,EAAsB,IAAtB,CAAjB,EAA8C,EAA9C,CAAP;AACH;AACJ;;AAED;;;;;;AAMA,SAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,WAAO,CAAC,QAAQ,EAAT,EAAa,QAAb,GAAwB,IAAxB,GACP,OADO,CACC,qBADD,EACwB,aADxB,EAEP,OAFO,CAEC,4BAFD,EAE+B,YAF/B,EAGP,OAHO,CAGC,mBAHD,EAGsB,QAHtB,EAIP,OAJO,CAIC,oBAJD,EAIuB,OAJvB,EAKP,OALO,CAKC,kBALD,EAKqB,OALrB,EAMP,WANO,EAAP;AAOH","file":"encoding-compiled.js","sourcesContent":["'use strict';\n\nvar iconvLite = require('iconv-lite');\n// Load Iconv from an external file to be able to disable Iconv for webpack\n// Add /\\/iconv-loader$/ to webpack.IgnorePlugin to ignore it\nvar Iconv = require('./iconv-loader');\n\n// Expose to the world\nmodule.exports.convert = convert;\n\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @param {Boolean} useLite If set to ture, force to use iconvLite\n * @return {Buffer} Encoded string\n */\nfunction convert(str, to, from, useLite) {\n    from = checkEncoding(from || 'UTF-8');\n    to = checkEncoding(to || 'UTF-8');\n    str = str || '';\n\n    var result;\n\n    if (from !== 'UTF-8' && typeof str === 'string') {\n        str = new Buffer(str, 'binary');\n    }\n\n    if (from === to) {\n        if (typeof str === 'string') {\n            result = new Buffer(str);\n        } else {\n            result = str;\n        }\n    } else if (Iconv && !useLite) {\n        try {\n            result = convertIconv(str, to, from);\n        } catch (E) {\n            console.error(E);\n            try {\n                result = convertIconvLite(str, to, from);\n            } catch (E) {\n                console.error(E);\n                result = str;\n            }\n        }\n    } else {\n        try {\n            result = convertIconvLite(str, to, from);\n        } catch (E) {\n            console.error(E);\n            result = str;\n        }\n    }\n\n\n    if (typeof result === 'string') {\n        result = new Buffer(result, 'utf-8');\n    }\n\n    return result;\n}\n\n/**\n * Convert encoding of a string with node-iconv (if available)\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconv(str, to, from) {\n    var response, iconv;\n    iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');\n    response = iconv.convert(str);\n    return response.slice(0, response.length);\n}\n\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconvLite(str, to, from) {\n    if (to === 'UTF-8') {\n        return iconvLite.decode(str, from);\n    } else if (from === 'UTF-8') {\n        return iconvLite.encode(str, to);\n    } else {\n        return iconvLite.encode(iconvLite.decode(str, from), to);\n    }\n}\n\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */\nfunction checkEncoding(name) {\n    return (name || '').toString().trim().\n    replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').\n    replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').\n    replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').\n    replace(/^ks_c_5601\\-1987$/i, 'CP949').\n    replace(/^us[\\-_]?ascii$/i, 'ASCII').\n    toUpperCase();\n}\n"]}