{"version":3,"sources":["CSSCore.js"],"names":[],"mappings":"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","file":"CSSCore-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar invariant = require('./invariant');\n\n/**\n * The CSSCore module specifies the API (and implements most of the methods)\n * that should be used when dealing with the display of elements (via their\n * CSS classes and visibility on screen. It is an API focused on mutating the\n * display and not reading it as no logical state should be encoded in the\n * display of elements.\n */\n\n/* Slow implementation for browsers that don't natively support .matches() */\nfunction matchesSelector_SLOW(element, selector) {\n  var root = element;\n  while (root.parentNode) {\n    root = root.parentNode;\n  }\n\n  var all = root.querySelectorAll(selector);\n  return Array.prototype.indexOf.call(all, element) !== -1;\n}\n\nvar CSSCore = {\n\n  /**\n   * Adds the class passed in to the element if it doesn't already have it.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  addClass: function addClass(element, className) {\n    !!/\\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.addClass takes only a single class name. \"%s\" contains ' + 'multiple classes.', className) : invariant(false) : void 0;\n\n    if (className) {\n      if (element.classList) {\n        element.classList.add(className);\n      } else if (!CSSCore.hasClass(element, className)) {\n        element.className = element.className + ' ' + className;\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Removes the class passed in from the element\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  removeClass: function removeClass(element, className) {\n    !!/\\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.removeClass takes only a single class name. \"%s\" contains ' + 'multiple classes.', className) : invariant(false) : void 0;\n\n    if (className) {\n      if (element.classList) {\n        element.classList.remove(className);\n      } else if (CSSCore.hasClass(element, className)) {\n        element.className = element.className.replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1').replace(/\\s+/g, ' ') // multiple spaces to one\n        .replace(/^\\s*|\\s*$/g, ''); // trim the ends\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Helper to add or remove a class from an element based on a condition.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @param {*} bool condition to whether to add or remove the class\n   * @return {DOMElement} the element passed in\n   */\n  conditionClass: function conditionClass(element, className, bool) {\n    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);\n  },\n\n  /**\n   * Tests whether the element has the class specified.\n   *\n   * @param {DOMNode|DOMWindow} element the element to check the class on\n   * @param {string} className the CSS className\n   * @return {boolean} true if the element has the class, false if not\n   */\n  hasClass: function hasClass(element, className) {\n    !!/\\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : void 0;\n    if (element.classList) {\n      return !!className && element.classList.contains(className);\n    }\n    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;\n  },\n\n  /**\n   * Tests whether the element matches the selector specified\n   *\n   * @param {DOMNode|DOMWindow} element the element that we are querying\n   * @param {string} selector the CSS selector\n   * @return {boolean} true if the element matches the selector, false if not\n   */\n  matchesSelector: function matchesSelector(element, selector) {\n    var matchesImpl = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector || element.msMatchesSelector || function (s) {\n      return matchesSelector_SLOW(element, s);\n    };\n    return matchesImpl.call(element, selector);\n  }\n\n};\n\nmodule.exports = CSSCore;"]}