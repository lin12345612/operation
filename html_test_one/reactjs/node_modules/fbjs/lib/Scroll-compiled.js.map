{"version":3,"sources":["Scroll.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;AAQA;;;;;;AAKA,SAAS,wBAAT,CAAkC,OAAlC,EAA2C,GAA3C,EAAgD;AAC9C,SAAO,CAAC,CAAC,GAAF,KAAU,YAAY,IAAI,eAAhB,IAAmC,YAAY,IAAI,IAA7D,CAAP;AACD;;AAED;;;;;;;;;;;;;AAaA,IAAI,SAAS;AACX;;;;AAIA,UAAQ,SAAS,MAAT,CAAgB,OAAhB,EAAyB;AAC/B,QAAI,MAAM,QAAQ,aAAlB;AACA,WAAO,yBAAyB,OAAzB,EAAkC,GAAlC;AACP;AACA;AACA;AACA,QAAI,IAAJ,CAAS,SAAT,IAAsB,IAAI,eAAJ,CAAoB,SAJnC,GAI+C,QAAQ,SAJ9D;AAKD,GAZU;;AAcX;;;;AAIA,UAAQ,SAAS,MAAT,CAAgB,OAAhB,EAAyB,MAAzB,EAAiC;AACvC,QAAI,MAAM,QAAQ,aAAlB;AACA,QAAI,yBAAyB,OAAzB,EAAkC,GAAlC,CAAJ,EAA4C;AAC1C,UAAI,IAAJ,CAAS,SAAT,GAAqB,IAAI,eAAJ,CAAoB,SAApB,GAAgC,MAArD;AACD,KAFD,MAEO;AACL,cAAQ,SAAR,GAAoB,MAApB;AACD;AACF,GAzBU;;AA2BX;;;;AAIA,WAAS,SAAS,OAAT,CAAiB,OAAjB,EAA0B;AACjC,QAAI,MAAM,QAAQ,aAAlB;AACA,WAAO,yBAAyB,OAAzB,EAAkC,GAAlC,IAAyC,IAAI,IAAJ,CAAS,UAAT,IAAuB,IAAI,eAAJ,CAAoB,UAApF,GAAiG,QAAQ,UAAhH;AACD,GAlCU;;AAoCX;;;;AAIA,WAAS,SAAS,OAAT,CAAiB,OAAjB,EAA0B,OAA1B,EAAmC;AAC1C,QAAI,MAAM,QAAQ,aAAlB;AACA,QAAI,yBAAyB,OAAzB,EAAkC,GAAlC,CAAJ,EAA4C;AAC1C,UAAI,IAAJ,CAAS,UAAT,GAAsB,IAAI,eAAJ,CAAoB,UAApB,GAAiC,OAAvD;AACD,KAFD,MAEO;AACL,cAAQ,UAAR,GAAqB,OAArB;AACD;AACF;AA/CU,CAAb;;AAkDA,OAAO,OAAP,GAAiB,MAAjB","file":"Scroll-compiled.js","sourcesContent":["\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * @param {DOMElement} element\n * @param {DOMDocument} doc\n * @return {boolean}\n */\nfunction _isViewportScrollElement(element, doc) {\n  return !!doc && (element === doc.documentElement || element === doc.body);\n}\n\n/**\n * Scroll Module. This class contains 4 simple static functions\n * to be used to access Element.scrollTop/scrollLeft properties.\n * To solve the inconsistencies between browsers when either\n * document.body or document.documentElement is supplied,\n * below logic will be used to alleviate the issue:\n *\n * 1. If 'element' is either 'document.body' or 'document.documentElement,\n *    get whichever element's 'scroll{Top,Left}' is larger.\n * 2. If 'element' is either 'document.body' or 'document.documentElement',\n *    set the 'scroll{Top,Left}' on both elements.\n */\n\nvar Scroll = {\n  /**\n   * @param {DOMElement} element\n   * @return {number}\n   */\n  getTop: function getTop(element) {\n    var doc = element.ownerDocument;\n    return _isViewportScrollElement(element, doc) ?\n    // In practice, they will either both have the same value,\n    // or one will be zero and the other will be the scroll position\n    // of the viewport. So we can use `X || Y` instead of `Math.max(X, Y)`\n    doc.body.scrollTop || doc.documentElement.scrollTop : element.scrollTop;\n  },\n\n  /**\n   * @param {DOMElement} element\n   * @param {number} newTop\n   */\n  setTop: function setTop(element, newTop) {\n    var doc = element.ownerDocument;\n    if (_isViewportScrollElement(element, doc)) {\n      doc.body.scrollTop = doc.documentElement.scrollTop = newTop;\n    } else {\n      element.scrollTop = newTop;\n    }\n  },\n\n  /**\n   * @param {DOMElement} element\n   * @return {number}\n   */\n  getLeft: function getLeft(element) {\n    var doc = element.ownerDocument;\n    return _isViewportScrollElement(element, doc) ? doc.body.scrollLeft || doc.documentElement.scrollLeft : element.scrollLeft;\n  },\n\n  /**\n   * @param {DOMElement} element\n   * @param {number} newLeft\n   */\n  setLeft: function setLeft(element, newLeft) {\n    var doc = element.ownerDocument;\n    if (_isViewportScrollElement(element, doc)) {\n      doc.body.scrollLeft = doc.documentElement.scrollLeft = newLeft;\n    } else {\n      element.scrollLeft = newLeft;\n    }\n  }\n};\n\nmodule.exports = Scroll;"]}