{"version":3,"sources":["VersionRange-compiled.js"],"names":[],"mappings":"AAAA;;;;;;;;AAQA;;;;AAEA,IAAI,UAAU,OAAO,MAAP,KAAkB,UAAlB,IAAgC,SAAO,OAAO,QAAd,MAA2B,QAA3D,GAAsE,UAAU,GAAV,EAAe;AAAE,gBAAc,GAAd,0CAAc,GAAd;AAAoB,CAA3G,GAA8G,UAAU,GAAV,EAAe;AAAE,SAAO,OAAO,OAAO,MAAP,KAAkB,UAAzB,IAAuC,IAAI,WAAJ,KAAoB,MAA3D,IAAqE,QAAQ,OAAO,SAApF,GAAgG,QAAhG,UAAkH,GAAlH,0CAAkH,GAAlH,CAAP;AAA+H,CAA5Q;;AAEA,IAAI,YAAY,QAAQ,aAAR,CAAhB;;AAEA,IAAI,iBAAiB,IAArB;AACA,IAAI,UAAU,MAAd;AACA,IAAI,aAAa,UAAjB;AACA,IAAI,gBAAgB,8BAApB;AACA,IAAI,eAAe,YAAnB;;AAEA;;;;;;;;AAQA,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,OAAlC,EAA2C;AACzC,MAAI,cAAc,MAAM,KAAN,CAAY,OAAZ,CAAlB;;AAEA,MAAI,YAAY,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,WAAO,YAAY,IAAZ,CAAiB,UAAU,KAAV,EAAiB;AACvC,aAAO,aAAa,QAAb,CAAsB,KAAtB,EAA6B,OAA7B,CAAP;AACD,KAFM,CAAP;AAGD,GAJD,MAIO;AACL,YAAQ,YAAY,CAAZ,EAAe,IAAf,EAAR;AACA,WAAO,qBAAqB,KAArB,EAA4B,OAA5B,CAAP;AACD;AACF;;AAED;;;;;;;;AAQA,SAAS,oBAAT,CAA8B,KAA9B,EAAqC,OAArC,EAA8C;AAC5C,MAAI,cAAc,MAAM,KAAN,CAAY,UAAZ,CAAlB;;AAEA,IAAE,YAAY,MAAZ,GAAqB,CAArB,IAA0B,YAAY,MAAZ,IAAsB,CAAlD,IAAuD,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,6CAAjB,CAAxC,GAA0G,UAAU,KAAV,CAAjK,GAAoL,KAAK,CAAzL;;AAEA,MAAI,YAAY,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAO,sBAAsB,YAAY,CAAZ,CAAtB,EAAsC,OAAtC,CAAP;AACD,GAFD,MAEO;AACL,QAAI,eAAe,YAAY,CAAZ,CAAnB;AAAA,QACI,aAAa,YAAY,CAAZ,CADjB;;AAGA,MAAE,gBAAgB,YAAhB,KAAiC,gBAAgB,UAAhB,CAAnC,IAAkE,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,4DAAjB,CAAxC,GAAyH,UAAU,KAAV,CAA3L,GAA8M,KAAK,CAAnN;;AAEA,WAAO,sBAAsB,OAAO,YAA7B,EAA2C,OAA3C,KAAuD,sBAAsB,OAAO,UAA7B,EAAyC,OAAzC,CAA9D;AACD;AACF;;AAED;;;;;;;;AAQA,SAAS,qBAAT,CAA+B,KAA/B,EAAsC,OAAtC,EAA+C;AAC7C,UAAQ,MAAM,IAAN,EAAR;AACA,MAAI,UAAU,EAAd,EAAkB;AAChB,WAAO,IAAP;AACD;;AAED,MAAI,oBAAoB,QAAQ,KAAR,CAAc,cAAd,CAAxB;;AAEA,MAAI,wBAAwB,yBAAyB,KAAzB,CAA5B;AAAA,MACI,WAAW,sBAAsB,QADrC;AAAA,MAEI,kBAAkB,sBAAsB,eAF5C;;AAIA,UAAQ,QAAR;AACE,SAAK,GAAL;AACE,aAAO,cAAc,iBAAd,EAAiC,eAAjC,CAAP;AACF,SAAK,IAAL;AACE,aAAO,qBAAqB,iBAArB,EAAwC,eAAxC,CAAP;AACF,SAAK,IAAL;AACE,aAAO,wBAAwB,iBAAxB,EAA2C,eAA3C,CAAP;AACF,SAAK,GAAL;AACE,aAAO,iBAAiB,iBAAjB,EAAoC,eAApC,CAAP;AACF,SAAK,GAAL;AACA,SAAK,IAAL;AACE,aAAO,wBAAwB,iBAAxB,EAA2C,eAA3C,CAAP;AACF;AACE,aAAO,WAAW,iBAAX,EAA8B,eAA9B,CAAP;AAbJ;AAeD;;AAED;;;;;;;AAOA,SAAS,aAAT,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B;AAC3B,SAAO,kBAAkB,CAAlB,EAAqB,CAArB,MAA4B,CAAC,CAApC;AACD;;AAED;;;;;;;AAOA,SAAS,oBAAT,CAA8B,CAA9B,EAAiC,CAAjC,EAAoC;AAClC,MAAI,SAAS,kBAAkB,CAAlB,EAAqB,CAArB,CAAb;AACA,SAAO,WAAW,CAAC,CAAZ,IAAiB,WAAW,CAAnC;AACD;;AAED;;;;;;;AAOA,SAAS,UAAT,CAAoB,CAApB,EAAuB,CAAvB,EAA0B;AACxB,SAAO,kBAAkB,CAAlB,EAAqB,CAArB,MAA4B,CAAnC;AACD;;AAED;;;;;;;AAOA,SAAS,uBAAT,CAAiC,CAAjC,EAAoC,CAApC,EAAuC;AACrC,MAAI,SAAS,kBAAkB,CAAlB,EAAqB,CAArB,CAAb;AACA,SAAO,WAAW,CAAX,IAAgB,WAAW,CAAlC;AACD;;AAED;;;;;;;AAOA,SAAS,gBAAT,CAA0B,CAA1B,EAA6B,CAA7B,EAAgC;AAC9B,SAAO,kBAAkB,CAAlB,EAAqB,CAArB,MAA4B,CAAnC;AACD;;AAED;;;;;;;;;AASA,SAAS,uBAAT,CAAiC,CAAjC,EAAoC,CAApC,EAAuC;AACrC,MAAI,aAAa,EAAE,KAAF,EAAjB;AACA,MAAI,aAAa,EAAE,KAAF,EAAjB;;AAEA,MAAI,WAAW,MAAX,GAAoB,CAAxB,EAA2B;AACzB,eAAW,GAAX;AACD;AACD,MAAI,YAAY,WAAW,MAAX,GAAoB,CAApC;AACA,MAAI,UAAU,SAAS,WAAW,SAAX,CAAT,EAAgC,EAAhC,CAAd;AACA,MAAI,SAAS,OAAT,CAAJ,EAAuB;AACrB,eAAW,SAAX,IAAwB,UAAU,CAAV,GAAc,EAAtC;AACD;;AAED,SAAO,wBAAwB,CAAxB,EAA2B,UAA3B,KAA0C,cAAc,CAAd,EAAiB,UAAjB,CAAjD;AACD;;AAED;;;;;;;;;;AAUA,SAAS,wBAAT,CAAkC,KAAlC,EAAyC;AACvC,MAAI,kBAAkB,MAAM,KAAN,CAAY,cAAZ,CAAtB;AACA,MAAI,UAAU,gBAAgB,CAAhB,EAAmB,KAAnB,CAAyB,aAAzB,CAAd;AACA,GAAC,OAAD,GAAW,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,wCAAjB,CAAxC,GAAqG,UAAU,KAAV,CAAhH,GAAmI,KAAK,CAAxI;;AAEA,SAAO;AACL,cAAU,QAAQ,CAAR,CADL;AAEL,qBAAiB,CAAC,QAAQ,CAAR,CAAD,EAAa,MAAb,CAAoB,gBAAgB,KAAhB,CAAsB,CAAtB,CAApB;AAFZ,GAAP;AAID;;AAED;;;;;;AAMA,SAAS,QAAT,CAAkB,MAAlB,EAA0B;AACxB,SAAO,CAAC,MAAM,MAAN,CAAD,IAAkB,SAAS,MAAT,CAAzB;AACD;;AAED;;;;;;;AAOA,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B,SAAO,CAAC,yBAAyB,KAAzB,EAAgC,QAAxC;AACD;;AAED;;;;;;AAMA,SAAS,OAAT,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC;AAC9B,OAAK,IAAI,IAAI,MAAM,MAAnB,EAA2B,IAAI,MAA/B,EAAuC,GAAvC,EAA4C;AAC1C,UAAM,CAAN,IAAW,GAAX;AACD;AACF;;AAED;;;;;;;;;;;;;AAaA,SAAS,iBAAT,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC;AAC/B,MAAI,EAAE,KAAF,EAAJ;AACA,MAAI,EAAE,KAAF,EAAJ;;AAEA,UAAQ,CAAR,EAAW,EAAE,MAAb;;AAEA;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAmC;AACjC,QAAI,UAAU,EAAE,CAAF,EAAK,KAAL,CAAW,SAAX,CAAd;AACA,QAAI,OAAJ,EAAa;AACX,QAAE,CAAF,IAAO,EAAE,CAAF,IAAO,GAAd;;AAEA;AACA,UAAI,QAAQ,CAAR,MAAe,GAAf,IAAsB,MAAM,EAAE,MAAF,GAAW,CAA3C,EAA8C;AAC5C,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAmC;AACjC,YAAE,CAAF,IAAO,GAAP;AACD;AACF;AACF;AACF;;AAED,UAAQ,CAAR,EAAW,EAAE,MAAb;;AAEA,SAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACD;;AAED;;;;;;;;;;AAUA,SAAS,cAAT,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B;AAC5B,MAAI,UAAU,EAAE,KAAF,CAAQ,YAAR,EAAsB,CAAtB,CAAd;AACA,MAAI,UAAU,EAAE,KAAF,CAAQ,YAAR,EAAsB,CAAtB,CAAd;AACA,MAAI,WAAW,SAAS,OAAT,EAAkB,EAAlB,CAAf;AACA,MAAI,WAAW,SAAS,OAAT,EAAkB,EAAlB,CAAf;;AAEA,MAAI,SAAS,QAAT,KAAsB,SAAS,QAAT,CAAtB,IAA4C,aAAa,QAA7D,EAAuE;AACrE,WAAO,QAAQ,QAAR,EAAkB,QAAlB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,QAAQ,CAAR,EAAW,CAAX,CAAP;AACD;AACF;;AAED;;;;;;;;AAQA,SAAS,OAAT,CAAiB,CAAjB,EAAoB,CAApB,EAAuB;AACrB,IAAE,CAAC,OAAO,CAAP,KAAa,WAAb,GAA2B,WAA3B,GAAyC,QAAQ,CAAR,CAA1C,OAA2D,OAAO,CAAP,KAAa,WAAb,GAA2B,WAA3B,GAAyC,QAAQ,CAAR,CAApG,CAAF,IAAqH,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,sCAAjB,CAAxC,GAAmG,UAAU,KAAV,CAAxN,GAA2O,KAAK,CAAhP;;AAEA,MAAI,IAAI,CAAR,EAAW;AACT,WAAO,CAAP;AACD,GAFD,MAEO,IAAI,IAAI,CAAR,EAAW;AAChB,WAAO,CAAC,CAAR;AACD,GAFM,MAEA;AACL,WAAO,CAAP;AACD;AACF;;AAED;;;;;;;;AAQA,SAAS,iBAAT,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC;AAC/B,MAAI,qBAAqB,kBAAkB,CAAlB,EAAqB,CAArB,CAAzB;AAAA,MACI,cAAc,mBAAmB,CAAnB,CADlB;AAAA,MAEI,cAAc,mBAAmB,CAAnB,CAFlB;;AAIA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,YAAY,MAAhC,EAAwC,GAAxC,EAA6C;AAC3C,QAAI,SAAS,eAAe,YAAY,CAAZ,CAAf,EAA+B,YAAY,CAAZ,CAA/B,CAAb;AACA,QAAI,MAAJ,EAAY;AACV,aAAO,MAAP;AACD;AACF;;AAED,SAAO,CAAP;AACD;;AAED,IAAI,eAAe;AACjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,YAAU,SAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC;AAC1C,WAAO,kBAAkB,MAAM,IAAN,EAAlB,EAAgC,QAAQ,IAAR,EAAhC,CAAP;AACD;AAlCgB,CAAnB;;AAqCA,OAAO,OAAP,GAAiB,YAAjB;;AAEA","file":"VersionRange-compiled-compiled.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar invariant = require('./invariant');\n\nvar componentRegex = /\\./;\nvar orRegex = /\\|\\|/;\nvar rangeRegex = /\\s+\\-\\s+/;\nvar modifierRegex = /^(<=|<|=|>=|~>|~|>|)?\\s*(.+)/;\nvar numericRegex = /^(\\d*)(.*)/;\n\n/**\n * Splits input `range` on \"||\" and returns true if any subrange matches\n * `version`.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkOrExpression(range, version) {\n  var expressions = range.split(orRegex);\n\n  if (expressions.length > 1) {\n    return expressions.some(function (range) {\n      return VersionRange.contains(range, version);\n    });\n  } else {\n    range = expressions[0].trim();\n    return checkRangeExpression(range, version);\n  }\n}\n\n/**\n * Splits input `range` on \" - \" (the surrounding whitespace is required) and\n * returns true if version falls between the two operands.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkRangeExpression(range, version) {\n  var expressions = range.split(rangeRegex);\n\n  !(expressions.length > 0 && expressions.length <= 2) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'the \"-\" operator expects exactly 2 operands') : invariant(false) : void 0;\n\n  if (expressions.length === 1) {\n    return checkSimpleExpression(expressions[0], version);\n  } else {\n    var startVersion = expressions[0],\n        endVersion = expressions[1];\n\n    !(isSimpleVersion(startVersion) && isSimpleVersion(endVersion)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'operands to the \"-\" operator must be simple (no modifiers)') : invariant(false) : void 0;\n\n    return checkSimpleExpression('>=' + startVersion, version) && checkSimpleExpression('<=' + endVersion, version);\n  }\n}\n\n/**\n * Checks if `range` matches `version`. `range` should be a \"simple\" range (ie.\n * not a compound range using the \" - \" or \"||\" operators).\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkSimpleExpression(range, version) {\n  range = range.trim();\n  if (range === '') {\n    return true;\n  }\n\n  var versionComponents = version.split(componentRegex);\n\n  var _getModifierAndCompon = getModifierAndComponents(range),\n      modifier = _getModifierAndCompon.modifier,\n      rangeComponents = _getModifierAndCompon.rangeComponents;\n\n  switch (modifier) {\n    case '<':\n      return checkLessThan(versionComponents, rangeComponents);\n    case '<=':\n      return checkLessThanOrEqual(versionComponents, rangeComponents);\n    case '>=':\n      return checkGreaterThanOrEqual(versionComponents, rangeComponents);\n    case '>':\n      return checkGreaterThan(versionComponents, rangeComponents);\n    case '~':\n    case '~>':\n      return checkApproximateVersion(versionComponents, rangeComponents);\n    default:\n      return checkEqual(versionComponents, rangeComponents);\n  }\n}\n\n/**\n * Checks whether `a` is less than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkLessThan(a, b) {\n  return compareComponents(a, b) === -1;\n}\n\n/**\n * Checks whether `a` is less than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkLessThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === -1 || result === 0;\n}\n\n/**\n * Checks whether `a` is equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkEqual(a, b) {\n  return compareComponents(a, b) === 0;\n}\n\n/**\n * Checks whether `a` is greater than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkGreaterThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === 1 || result === 0;\n}\n\n/**\n * Checks whether `a` is greater than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkGreaterThan(a, b) {\n  return compareComponents(a, b) === 1;\n}\n\n/**\n * Checks whether `a` is \"reasonably close\" to `b` (as described in\n * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is \"1.3.1\"\n * then \"reasonably close\" is defined as \">= 1.3.1 and < 1.4\".\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkApproximateVersion(a, b) {\n  var lowerBound = b.slice();\n  var upperBound = b.slice();\n\n  if (upperBound.length > 1) {\n    upperBound.pop();\n  }\n  var lastIndex = upperBound.length - 1;\n  var numeric = parseInt(upperBound[lastIndex], 10);\n  if (isNumber(numeric)) {\n    upperBound[lastIndex] = numeric + 1 + '';\n  }\n\n  return checkGreaterThanOrEqual(a, lowerBound) && checkLessThan(a, upperBound);\n}\n\n/**\n * Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version\n * components from `range`.\n *\n * For example, given `range` \">= 1.2.3\" returns an object with a `modifier` of\n * `\">=\"` and `components` of `[1, 2, 3]`.\n *\n * @param {string} range\n * @returns {object}\n */\nfunction getModifierAndComponents(range) {\n  var rangeComponents = range.split(componentRegex);\n  var matches = rangeComponents[0].match(modifierRegex);\n  !matches ? process.env.NODE_ENV !== 'production' ? invariant(false, 'expected regex to match but it did not') : invariant(false) : void 0;\n\n  return {\n    modifier: matches[1],\n    rangeComponents: [matches[2]].concat(rangeComponents.slice(1))\n  };\n}\n\n/**\n * Determines if `number` is a number.\n *\n * @param {mixed} number\n * @returns {boolean}\n */\nfunction isNumber(number) {\n  return !isNaN(number) && isFinite(number);\n}\n\n/**\n * Tests whether `range` is a \"simple\" version number without any modifiers\n * (\">\", \"~\" etc).\n *\n * @param {string} range\n * @returns {boolean}\n */\nfunction isSimpleVersion(range) {\n  return !getModifierAndComponents(range).modifier;\n}\n\n/**\n * Zero-pads array `array` until it is at least `length` long.\n *\n * @param {array} array\n * @param {number} length\n */\nfunction zeroPad(array, length) {\n  for (var i = array.length; i < length; i++) {\n    array[i] = '0';\n  }\n}\n\n/**\n * Normalizes `a` and `b` in preparation for comparison by doing the following:\n *\n * - zero-pads `a` and `b`\n * - marks any \"x\", \"X\" or \"*\" component in `b` as equivalent by zero-ing it out\n *   in both `a` and `b`\n * - marks any final \"*\" component in `b` as a greedy wildcard by zero-ing it\n *   and all of its successors in `a`\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {array<array<string>>}\n */\nfunction normalizeVersions(a, b) {\n  a = a.slice();\n  b = b.slice();\n\n  zeroPad(a, b.length);\n\n  // mark \"x\" and \"*\" components as equal\n  for (var i = 0; i < b.length; i++) {\n    var matches = b[i].match(/^[x*]$/i);\n    if (matches) {\n      b[i] = a[i] = '0';\n\n      // final \"*\" greedily zeros all remaining components\n      if (matches[0] === '*' && i === b.length - 1) {\n        for (var j = i; j < a.length; j++) {\n          a[j] = '0';\n        }\n      }\n    }\n  }\n\n  zeroPad(b, a.length);\n\n  return [a, b];\n}\n\n/**\n * Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.\n *\n * For example, `10-alpha` is greater than `2-beta`.\n *\n * @param {string} a\n * @param {string} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compareNumeric(a, b) {\n  var aPrefix = a.match(numericRegex)[1];\n  var bPrefix = b.match(numericRegex)[1];\n  var aNumeric = parseInt(aPrefix, 10);\n  var bNumeric = parseInt(bPrefix, 10);\n\n  if (isNumber(aNumeric) && isNumber(bNumeric) && aNumeric !== bNumeric) {\n    return compare(aNumeric, bNumeric);\n  } else {\n    return compare(a, b);\n  }\n}\n\n/**\n * Returns the ordering of `a` and `b`.\n *\n * @param {string|number} a\n * @param {string|number} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compare(a, b) {\n  !((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof(b))) ? process.env.NODE_ENV !== 'production' ? invariant(false, '\"a\" and \"b\" must be of the same type') : invariant(false) : void 0;\n\n  if (a > b) {\n    return 1;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Compares arrays of version components.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compareComponents(a, b) {\n  var _normalizeVersions = normalizeVersions(a, b),\n      aNormalized = _normalizeVersions[0],\n      bNormalized = _normalizeVersions[1];\n\n  for (var i = 0; i < bNormalized.length; i++) {\n    var result = compareNumeric(aNormalized[i], bNormalized[i]);\n    if (result) {\n      return result;\n    }\n  }\n\n  return 0;\n}\n\nvar VersionRange = {\n  /**\n   * Checks whether `version` satisfies the `range` specification.\n   *\n   * We support a subset of the expressions defined in\n   * https://www.npmjs.org/doc/misc/semver.html:\n   *\n   *    version   Must match version exactly\n   *    =version  Same as just version\n   *    >version  Must be greater than version\n   *    >=version Must be greater than or equal to version\n   *    <version  Must be less than version\n   *    <=version Must be less than or equal to version\n   *    ~version  Must be at least version, but less than the next significant\n   *              revision above version:\n   *              \"~1.2.3\" is equivalent to \">= 1.2.3 and < 1.3\"\n   *    ~>version Equivalent to ~version\n   *    1.2.x     Must match \"1.2.x\", where \"x\" is a wildcard that matches\n   *              anything\n   *    1.2.*     Similar to \"1.2.x\", but \"*\" in the trailing position is a\n   *              \"greedy\" wildcard, so will match any number of additional\n   *              components:\n   *              \"1.2.*\" will match \"1.2.1\", \"1.2.1.1\", \"1.2.1.1.1\" etc\n   *    *         Any version\n   *    \"\"        (Empty string) Same as *\n   *    v1 - v2   Equivalent to \">= v1 and <= v2\"\n   *    r1 || r2  Passes if either r1 or r2 are satisfied\n   *\n   * @param {string} range\n   * @param {string} version\n   * @returns {boolean}\n   */\n  contains: function contains(range, version) {\n    return checkOrExpression(range.trim(), version.trim());\n  }\n};\n\nmodule.exports = VersionRange;\n\n//# sourceMappingURL=VersionRange-compiled.js.map"]}