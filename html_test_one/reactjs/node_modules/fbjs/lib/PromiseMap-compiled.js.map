{"version":3,"sources":["PromiseMap.js"],"names":[],"mappings":"AAAA;;;;;;;;;AASA;;AAEA,SAAS,eAAT,CAAyB,QAAzB,EAAmC,WAAnC,EAAgD;AAAE,MAAI,EAAE,oBAAoB,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAI,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAEA,IAAI,YAAY,QAAQ,aAAR,CAAhB;;AAEA;;;;;;AAMA,IAAI,aAAa,YAAY;AAC3B,WAAS,UAAT,GAAsB;AACpB,oBAAgB,IAAhB,EAAsB,UAAtB;;AAEA,SAAK,SAAL,GAAiB,EAAjB;AACD;;AAED,aAAW,SAAX,CAAqB,GAArB,GAA2B,SAAS,GAAT,CAAa,GAAb,EAAkB;AAC3C,WAAO,YAAY,KAAK,SAAjB,EAA4B,GAA5B,EAAiC,UAAjC,EAAP;AACD,GAFD;;AAIA,aAAW,SAAX,CAAqB,UAArB,GAAkC,SAAS,UAAT,CAAoB,GAApB,EAAyB,KAAzB,EAAgC;AAChE,QAAI,QAAQ,YAAY,KAAK,SAAjB,EAA4B,GAA5B,CAAZ;AACA,KAAC,CAAC,MAAM,SAAN,EAAF,GAAsB,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,mCAAjB,EAAsD,GAAtD,CAAxC,GAAqG,UAAU,KAAV,CAA3H,GAA8I,KAAK,CAAnJ;AACA,UAAM,OAAN,CAAc,KAAd;AACD,GAJD;;AAMA,aAAW,SAAX,CAAqB,SAArB,GAAiC,SAAS,SAAT,CAAmB,GAAnB,EAAwB,MAAxB,EAAgC;AAC/D,QAAI,QAAQ,YAAY,KAAK,SAAjB,EAA4B,GAA5B,CAAZ;AACA,KAAC,CAAC,MAAM,SAAN,EAAF,GAAsB,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,mCAAjB,EAAsD,GAAtD,CAAxC,GAAqG,UAAU,KAAV,CAA3H,GAA8I,KAAK,CAAnJ;AACA,UAAM,MAAN,CAAa,MAAb;AACD,GAJD;;AAMA,SAAO,UAAP;AACD,CAxBgB,EAAjB;;AA0BA,SAAS,WAAT,CAAqB,OAArB,EAA8B,GAA9B,EAAmC;AACjC,MAAI,CAAC,QAAQ,cAAR,CAAuB,GAAvB,CAAL,EAAkC;AAChC,YAAQ,GAAR,IAAe,IAAI,QAAJ,EAAf;AACD;AACD,SAAO,QAAQ,GAAR,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,UAAjB","file":"PromiseMap-compiled.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Deferred = require('./Deferred');\n\nvar invariant = require('./invariant');\n\n/**\n * A map of asynchronous values that can be get or set in any order. Unlike a\n * normal map, setting the value for a particular key more than once throws.\n * Also unlike a normal map, a key can either be resolved or rejected.\n */\n\nvar PromiseMap = function () {\n  function PromiseMap() {\n    _classCallCheck(this, PromiseMap);\n\n    this._deferred = {};\n  }\n\n  PromiseMap.prototype.get = function get(key) {\n    return getDeferred(this._deferred, key).getPromise();\n  };\n\n  PromiseMap.prototype.resolveKey = function resolveKey(key, value) {\n    var entry = getDeferred(this._deferred, key);\n    !!entry.isSettled() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'PromiseMap: Already settled `%s`.', key) : invariant(false) : void 0;\n    entry.resolve(value);\n  };\n\n  PromiseMap.prototype.rejectKey = function rejectKey(key, reason) {\n    var entry = getDeferred(this._deferred, key);\n    !!entry.isSettled() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'PromiseMap: Already settled `%s`.', key) : invariant(false) : void 0;\n    entry.reject(reason);\n  };\n\n  return PromiseMap;\n}();\n\nfunction getDeferred(entries, key) {\n  if (!entries.hasOwnProperty(key)) {\n    entries[key] = new Deferred();\n  }\n  return entries[key];\n}\n\nmodule.exports = PromiseMap;"]}