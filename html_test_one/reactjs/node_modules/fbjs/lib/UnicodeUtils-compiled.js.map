{"version":3,"sources":["UnicodeUtils.js"],"names":[],"mappings":"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","file":"UnicodeUtils-compiled.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/**\n * Unicode-enabled replacesments for basic String functions.\n *\n * All the functions in this module assume that the input string is a valid\n * UTF-16 encoding of a Unicode sequence. If it's not the case, the behavior\n * will be undefined.\n *\n * WARNING: Since this module is typechecks-enforced, you may find new bugs\n * when replacing normal String functions with ones provided here.\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n// These two ranges are consecutive so anything in [HIGH_START, LOW_END] is a\n// surrogate code unit.\nvar SURROGATE_HIGH_START = 0xD800;\nvar SURROGATE_HIGH_END = 0xDBFF;\nvar SURROGATE_LOW_START = 0xDC00;\nvar SURROGATE_LOW_END = 0xDFFF;\nvar SURROGATE_UNITS_REGEX = /[\\uD800-\\uDFFF]/;\n\n/**\n * @param {number} codeUnit   A Unicode code-unit, in range [0, 0x10FFFF]\n * @return {boolean}          Whether code-unit is in a surrogate (hi/low) range\n */\nfunction isCodeUnitInSurrogateRange(codeUnit) {\n  return SURROGATE_HIGH_START <= codeUnit && codeUnit <= SURROGATE_LOW_END;\n}\n\n/**\n * Returns whether the two characters starting at `index` form a surrogate pair.\n * For example, given the string s = \"\\uD83D\\uDE0A\", (s, 0) returns true and\n * (s, 1) returns false.\n *\n * @param {string} str\n * @param {number} index\n * @return {boolean}\n */\nfunction isSurrogatePair(str, index) {\n  !(0 <= index && index < str.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isSurrogatePair: Invalid index %s for string length %s.', index, str.length) : invariant(false) : void 0;\n  if (index + 1 === str.length) {\n    return false;\n  }\n  var first = str.charCodeAt(index);\n  var second = str.charCodeAt(index + 1);\n  return SURROGATE_HIGH_START <= first && first <= SURROGATE_HIGH_END && SURROGATE_LOW_START <= second && second <= SURROGATE_LOW_END;\n}\n\n/**\n * @param {string} str  Non-empty string\n * @return {boolean}    True if the input includes any surrogate code units\n */\nfunction hasSurrogateUnit(str) {\n  return SURROGATE_UNITS_REGEX.test(str);\n}\n\n/**\n * Return the length of the original Unicode character at given position in the\n * String by looking into the UTF-16 code unit; that is equal to 1 for any\n * non-surrogate characters in BMP ([U+0000..U+D7FF] and [U+E000, U+FFFF]); and\n * returns 2 for the hi/low surrogates ([U+D800..U+DFFF]), which are in fact\n * representing non-BMP characters ([U+10000..U+10FFFF]).\n *\n * Examples:\n * - '\\u0020' => 1\n * - '\\u3020' => 1\n * - '\\uD835' => 2\n * - '\\uD835\\uDDEF' => 2\n * - '\\uDDEF' => 2\n *\n * @param {string} str  Non-empty string\n * @param {number} pos  Position in the string to look for one code unit\n * @return {number}      Number 1 or 2\n */\nfunction getUTF16Length(str, pos) {\n  return 1 + isCodeUnitInSurrogateRange(str.charCodeAt(pos));\n}\n\n/**\n * Fully Unicode-enabled replacement for String#length\n *\n * @param {string} str  Valid Unicode string\n * @return {number}     The number of Unicode characters in the string\n */\nfunction strlen(str) {\n  // Call the native functions if there's no surrogate char\n  if (!hasSurrogateUnit(str)) {\n    return str.length;\n  }\n\n  var len = 0;\n  for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) {\n    len++;\n  }\n  return len;\n}\n\n/**\n * Fully Unicode-enabled replacement for String#substr()\n *\n * @param {string} str      Valid Unicode string\n * @param {number} start    Location in Unicode sequence to begin extracting\n * @param {?number} length  The number of Unicode characters to extract\n *                          (default: to the end of the string)\n * @return {string}         Extracted sub-string\n */\nfunction substr(str, start, length) {\n  start = start || 0;\n  length = length === undefined ? Infinity : length || 0;\n\n  // Call the native functions if there's no surrogate char\n  if (!hasSurrogateUnit(str)) {\n    return str.substr(start, length);\n  }\n\n  // Obvious cases\n  var size = str.length;\n  if (size <= 0 || start > size || length <= 0) {\n    return '';\n  }\n\n  // Find the actual starting position\n  var posA = 0;\n  if (start > 0) {\n    for (; start > 0 && posA < size; start--) {\n      posA += getUTF16Length(str, posA);\n    }\n    if (posA >= size) {\n      return '';\n    }\n  } else if (start < 0) {\n    for (posA = size; start < 0 && 0 < posA; start++) {\n      posA -= getUTF16Length(str, posA - 1);\n    }\n    if (posA < 0) {\n      posA = 0;\n    }\n  }\n\n  // Find the actual ending position\n  var posB = size;\n  if (length < size) {\n    for (posB = posA; length > 0 && posB < size; length--) {\n      posB += getUTF16Length(str, posB);\n    }\n  }\n\n  return str.substring(posA, posB);\n}\n\n/**\n * Fully Unicode-enabled replacement for String#substring()\n *\n * @param {string} str    Valid Unicode string\n * @param {number} start  Location in Unicode sequence to begin extracting\n * @param {?number} end   Location in Unicode sequence to end extracting\n *                        (default: end of the string)\n * @return {string}       Extracted sub-string\n */\nfunction substring(str, start, end) {\n  start = start || 0;\n  end = end === undefined ? Infinity : end || 0;\n\n  if (start < 0) {\n    start = 0;\n  }\n  if (end < 0) {\n    end = 0;\n  }\n\n  var length = Math.abs(end - start);\n  start = start < end ? start : end;\n  return substr(str, start, length);\n}\n\n/**\n * Get a list of Unicode code-points from a String\n *\n * @param {string} str        Valid Unicode string\n * @return {array<number>}    A list of code-points in [0..0x10FFFF]\n */\nfunction getCodePoints(str) {\n  var codePoints = [];\n  for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) {\n    codePoints.push(str.codePointAt(pos));\n  }\n  return codePoints;\n}\n\nvar UnicodeUtils = {\n  getCodePoints: getCodePoints,\n  getUTF16Length: getUTF16Length,\n  hasSurrogateUnit: hasSurrogateUnit,\n  isCodeUnitInSurrogateRange: isCodeUnitInSurrogateRange,\n  isSurrogatePair: isSurrogatePair,\n  strlen: strlen,\n  substring: substring,\n  substr: substr\n};\n\nmodule.exports = UnicodeUtils;"]}