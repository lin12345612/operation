{"version":3,"sources":["warning.js"],"names":[],"mappings":"AAAA;;;;;;;;AAQA;;AAEA,IAAI,gBAAgB,QAAQ,iBAAR,CAApB;;AAEA;;;;;;;AAOA,IAAI,UAAU,aAAd;;AAEA,IAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI,eAAe,SAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC/C,SAAK,IAAI,OAAO,UAAU,MAArB,EAA6B,OAAO,MAAM,OAAO,CAAP,GAAW,OAAO,CAAlB,GAAsB,CAA5B,CAApC,EAAoE,OAAO,CAAhF,EAAmF,OAAO,IAA1F,EAAgG,MAAhG,EAAwG;AACtG,WAAK,OAAO,CAAZ,IAAiB,UAAU,IAAV,CAAjB;AACD;;AAED,QAAI,WAAW,CAAf;AACA,QAAI,UAAU,cAAc,OAAO,OAAP,CAAe,KAAf,EAAsB,YAAY;AAC5D,aAAO,KAAK,UAAL,CAAP;AACD,KAF2B,CAA5B;AAGA,QAAI,OAAO,OAAP,KAAmB,WAAvB,EAAoC;AAClC,cAAQ,KAAR,CAAc,OAAd;AACD;AACD,QAAI;AACF;AACA;AACA;AACA,YAAM,IAAI,KAAJ,CAAU,OAAV,CAAN;AACD,KALD,CAKE,OAAO,CAAP,EAAU,CAAE;AACf,GAlBD;;AAoBA,YAAU,SAAS,OAAT,CAAiB,SAAjB,EAA4B,MAA5B,EAAoC;AAC5C,QAAI,WAAW,SAAf,EAA0B;AACxB,YAAM,IAAI,KAAJ,CAAU,8DAA8D,kBAAxE,CAAN;AACD;;AAED,QAAI,OAAO,OAAP,CAAe,6BAAf,MAAkD,CAAtD,EAAyD;AACvD,aADuD,CAC/C;AACT;;AAED,QAAI,CAAC,SAAL,EAAgB;AACd,WAAK,IAAI,QAAQ,UAAU,MAAtB,EAA8B,OAAO,MAAM,QAAQ,CAAR,GAAY,QAAQ,CAApB,GAAwB,CAA9B,CAArC,EAAuE,QAAQ,CAApF,EAAuF,QAAQ,KAA/F,EAAsG,OAAtG,EAA+G;AAC7G,aAAK,QAAQ,CAAb,IAAkB,UAAU,KAAV,CAAlB;AACD;;AAED,mBAAa,KAAb,CAAmB,SAAnB,EAA8B,CAAC,MAAD,EAAS,MAAT,CAAgB,IAAhB,CAA9B;AACD;AACF,GAhBD;AAiBD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"warning-compiled.js","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  var printWarning = function printWarning(format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function warning(condition, format) {\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;"]}