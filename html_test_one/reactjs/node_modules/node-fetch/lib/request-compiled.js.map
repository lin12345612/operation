{"version":3,"sources":["request.js"],"names":[],"mappings":";;AACA;;;;;;AAMA,IAAI,YAAY,QAAQ,KAAR,EAAe,KAA/B;AACA,IAAI,UAAU,QAAQ,WAAR,CAAd;AACA,IAAI,OAAO,QAAQ,QAAR,CAAX;;AAEA,OAAO,OAAP,GAAiB,OAAjB;;AAEA;;;;;;;AAOA,SAAS,OAAT,CAAiB,KAAjB,EAAwB,IAAxB,EAA8B;AAC7B,KAAI,GAAJ,EAAS,UAAT;;AAEA;AACA,KAAI,EAAE,iBAAiB,OAAnB,CAAJ,EAAiC;AAChC,QAAM,KAAN;AACA,eAAa,UAAU,GAAV,CAAb;AACA,UAAQ,EAAR;AACA,EAJD,MAIO;AACN,QAAM,MAAM,GAAZ;AACA,eAAa,UAAU,GAAV,CAAb;AACA;;AAED;AACA,QAAO,QAAQ,EAAf;;AAEA;AACA,MAAK,MAAL,GAAc,KAAK,MAAL,IAAe,MAAM,MAArB,IAA+B,KAA7C;AACA,MAAK,QAAL,GAAgB,KAAK,QAAL,IAAiB,MAAM,QAAvB,IAAmC,QAAnD;AACA,MAAK,OAAL,GAAe,IAAI,OAAJ,CAAY,KAAK,OAAL,IAAgB,MAAM,OAAtB,IAAiC,EAA7C,CAAf;AACA,MAAK,GAAL,GAAW,GAAX;;AAEA;AACA,MAAK,MAAL,GAAc,KAAK,MAAL,KAAgB,SAAhB,GACb,KAAK,MADQ,GACC,MAAM,MAAN,KAAiB,SAAjB,GACd,MAAM,MADQ,GACC,EAFhB;AAGA,MAAK,QAAL,GAAgB,KAAK,QAAL,KAAkB,SAAlB,GACf,KAAK,QADU,GACC,MAAM,QAAN,KAAmB,SAAnB,GAChB,MAAM,QADU,GACC,IAFlB;AAGA,MAAK,OAAL,GAAe,KAAK,OAAL,IAAgB,MAAM,OAAtB,IAAiC,CAAhD;AACA,MAAK,KAAL,GAAa,KAAK,KAAL,IAAc,MAAM,KAAjC;;AAEA,MAAK,IAAL,CAAU,IAAV,EAAgB,KAAK,IAAL,IAAa,KAAK,MAAL,CAAY,KAAZ,CAA7B,EAAiD;AAChD,WAAS,KAAK,OAAL,IAAgB,MAAM,OAAtB,IAAiC,CADM;AAEhD,QAAM,KAAK,IAAL,IAAa,MAAM,IAAnB,IAA2B;AAFe,EAAjD;;AAKA;AACA,MAAK,QAAL,GAAgB,WAAW,QAA3B;AACA,MAAK,QAAL,GAAgB,WAAW,QAA3B;AACA,MAAK,IAAL,GAAY,WAAW,IAAvB;AACA,MAAK,IAAL,GAAY,WAAW,IAAvB;AACA,MAAK,IAAL,GAAY,WAAW,IAAvB;AACA;;AAED,QAAQ,SAAR,GAAoB,OAAO,MAAP,CAAc,KAAK,SAAnB,CAApB;;AAEA;;;;;AAKA,QAAQ,SAAR,CAAkB,KAAlB,GAA0B,YAAW;AACpC,QAAO,IAAI,OAAJ,CAAY,IAAZ,CAAP;AACA,CAFD","file":"request-compiled.js","sourcesContent":["\n/**\n * request.js\n *\n * Request class contains server only options\n */\n\nvar parse_url = require('url').parse;\nvar Headers = require('./headers');\nvar Body = require('./body');\n\nmodule.exports = Request;\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nfunction Request(input, init) {\n\tvar url, url_parsed;\n\n\t// normalize input\n\tif (!(input instanceof Request)) {\n\t\turl = input;\n\t\turl_parsed = parse_url(url);\n\t\tinput = {};\n\t} else {\n\t\turl = input.url;\n\t\turl_parsed = parse_url(url);\n\t}\n\n\t// normalize init\n\tinit = init || {};\n\n\t// fetch spec options\n\tthis.method = init.method || input.method || 'GET';\n\tthis.redirect = init.redirect || input.redirect || 'follow';\n\tthis.headers = new Headers(init.headers || input.headers || {});\n\tthis.url = url;\n\n\t// server only options\n\tthis.follow = init.follow !== undefined ?\n\t\tinit.follow : input.follow !== undefined ?\n\t\tinput.follow : 20;\n\tthis.compress = init.compress !== undefined ?\n\t\tinit.compress : input.compress !== undefined ?\n\t\tinput.compress : true;\n\tthis.counter = init.counter || input.counter || 0;\n\tthis.agent = init.agent || input.agent;\n\n\tBody.call(this, init.body || this._clone(input), {\n\t\ttimeout: init.timeout || input.timeout || 0,\n\t\tsize: init.size || input.size || 0\n\t});\n\n\t// server request options\n\tthis.protocol = url_parsed.protocol;\n\tthis.hostname = url_parsed.hostname;\n\tthis.port = url_parsed.port;\n\tthis.path = url_parsed.path;\n\tthis.auth = url_parsed.auth;\n}\n\nRequest.prototype = Object.create(Body.prototype);\n\n/**\n * Clone this request\n *\n * @return  Request\n */\nRequest.prototype.clone = function() {\n\treturn new Request(this);\n};\n"]}