{"version":3,"sources":["fetch-error.js"],"names":[],"mappings":";;AACA;;;;;;AAMA,OAAO,OAAP,GAAiB,UAAjB;;AAEA;;;;;;;;AAQA,SAAS,UAAT,CAAoB,OAApB,EAA6B,IAA7B,EAAmC,WAAnC,EAAgD;;AAE/C,OAAK,IAAL,GAAY,KAAK,WAAL,CAAiB,IAA7B;AACA,OAAK,OAAL,GAAe,OAAf;AACA,OAAK,IAAL,GAAY,IAAZ;;AAEA;AACA,MAAI,WAAJ,EAAiB;AAChB,SAAK,IAAL,GAAY,KAAK,KAAL,GAAa,YAAY,IAArC;AACA;;AAED;AACA,QAAM,iBAAN,CAAwB,IAAxB,EAA8B,KAAK,WAAnC;AACA;;AAED,QAAQ,MAAR,EAAgB,QAAhB,CAAyB,UAAzB,EAAqC,KAArC","file":"fetch-error-compiled.js","sourcesContent":["\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\nmodule.exports = FetchError;\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nfunction FetchError(message, type, systemError) {\n\n\tthis.name = this.constructor.name;\n\tthis.message = message;\n\tthis.type = type;\n\n\t// when err.type is `system`, err.code contains system error code\n\tif (systemError) {\n\t\tthis.code = this.errno = systemError.code;\n\t}\n\n\t// hide custom error implementation details from end-users\n\tError.captureStackTrace(this, this.constructor);\n}\n\nrequire('util').inherits(FetchError, Error);\n"]}